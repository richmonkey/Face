{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///external_api.min.js","webpack:///webpack/bootstrap bd9fc911bcb4ae380ba7","webpack:///./modules/API/external/external_api.js","webpack:///./~/postis/src/index.js"],"names":["root","factory","exports","module","define","amd","JitsiMeetExternalAPI","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","sendMessage","postis","object","send","changeEventStatus","event","status","events","method","params","type","name","value","console","error","domain","room_name","width","height","parentNode","configOverwrite","interfaceConfigOverwrite","noSsl","MIN_WIDTH","MIN_HEIGHT","scriptTag","document","scripts","length","iframeHolder","appendChild","createElement","style","frameName","url","key","hasOwnProperty","frame","src","setAttribute","postisInit","window","contentWindow","scope","eventHandlers","commands","displayName","toggleAudio","toggleVideo","toggleFilmStrip","toggleChat","toggleContactList","toggleShareScreen","hangup","incomingMessage","outgoingMessage","displayNameChange","participantJoined","participantLeft","videoConferenceJoined","videoConferenceLeft","readyToClose","prototype","executeCommand","argumentsList","argumentsArray","executeCommands","addEventListeners","i","addEventListener","listener","listen","data","bind","removeEventListener","removeEventListeners","dispose","destroy","getElementById","self","setTimeout","removeChild","Postis","options","readynessCheck","targetWindow","windowForEventListening","listeners","sendBuffer","listenBuffer","ready","readyMethod","JSON","parse","e","listenersForMethod","push","callback","listenBufferForMethod","j","opts","postMessage","stringify","clearInterval","readyCheckID","Date","Math","random","setInterval"],"mappings":"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","file":"external_api.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"JitsiMeetExternalAPI\"] = factory();\n\telse\n\t\troot[\"JitsiMeetExternalAPI\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"JitsiMeetExternalAPI\"] = factory();\n\telse\n\t\troot[\"JitsiMeetExternalAPI\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\t/**\n\t * Implements API class that embeds Jitsi Meet in external applications.\n\t */\n\t\n\tvar postisInit = __webpack_require__(1);\n\t\n\t/**\n\t * The minimum width for the Jitsi Meet frame\n\t * @type {number}\n\t */\n\tvar MIN_WIDTH = 790;\n\t\n\t/**\n\t * The minimum height for the Jitsi Meet frame\n\t * @type {number}\n\t */\n\tvar MIN_HEIGHT = 300;\n\t\n\t/**\n\t * Last id of api object\n\t * @type {number}\n\t */\n\tvar id = 0;\n\t\n\t/**\n\t * Maps the names of the commands expected by the API with the name of the\n\t * commands expected by jitsi-meet\n\t */\n\tvar commands = {\n\t    \"displayName\": \"display-name\",\n\t    \"toggleAudio\": \"toggle-audio\",\n\t    \"toggleVideo\": \"toggle-video\",\n\t    \"toggleFilmStrip\": \"toggle-film-strip\",\n\t    \"toggleChat\": \"toggle-chat\",\n\t    \"toggleContactList\": \"toggle-contact-list\",\n\t    \"toggleShareScreen\": \"toggle-share-screen\",\n\t    \"hangup\": \"video-hangup\"\n\t};\n\t\n\t/**\n\t * Maps the names of the events expected by the API with the name of the\n\t * events expected by jitsi-meet\n\t */\n\tvar events = {\n\t    \"incomingMessage\": \"incoming-message\",\n\t    \"outgoingMessage\": \"outgoing-message\",\n\t    \"displayNameChange\": \"display-name-change\",\n\t    \"participantJoined\": \"participant-joined\",\n\t    \"participantLeft\": \"participant-left\",\n\t    \"videoConferenceJoined\": \"video-conference-joined\",\n\t    \"videoConferenceLeft\": \"video-conference-left\",\n\t    \"readyToClose\": \"video-ready-to-close\"\n\t};\n\t\n\t/**\n\t * Sends the passed object to Jitsi Meet\n\t * @param postis {Postis object} the postis instance that is going to be used\n\t * to send the message\n\t * @param object the object to be sent\n\t * - method {sting}\n\t * - params {object}\n\t */\n\tfunction sendMessage(postis, object) {\n\t    postis.send(object);\n\t}\n\t\n\t/**\n\t * Sends message for event enable/disable status change.\n\t * @param postis {Postis object} the postis instance that is going to be used.\n\t * @param event {string} the name of the event\n\t * @param status {boolean} true - enabled; false - disabled;\n\t */\n\tfunction changeEventStatus(postis, event, status) {\n\t    if (!(event in events)) {\n\t        console.error(\"Not supported event name.\");\n\t        return;\n\t    }\n\t    sendMessage(postis, {\n\t        method: \"jitsiSystemMessage\",\n\t        params: { type: \"eventStatus\", name: events[event], value: status }\n\t    });\n\t}\n\t\n\t/**\n\t * Constructs new API instance. Creates iframe element that loads\n\t * Jitsi Meet.\n\t * @param domain the domain name of the server that hosts the conference\n\t * @param room_name the name of the room to join\n\t * @param width width of the iframe\n\t * @param height height of the iframe\n\t * @param parent_node the node that will contain the iframe\n\t * @param filmStripOnly if the value is true only the small videos will be\n\t * visible.\n\t * @param noSsl if the value is true https won't be used\n\t * @constructor\n\t */\n\tfunction JitsiMeetExternalAPI(domain, room_name, width, height, parentNode, configOverwrite, interfaceConfigOverwrite, noSsl) {\n\t    if (!width || width < MIN_WIDTH) width = MIN_WIDTH;\n\t    if (!height || height < MIN_HEIGHT) height = MIN_HEIGHT;\n\t\n\t    this.parentNode = null;\n\t    if (parentNode) {\n\t        this.parentNode = parentNode;\n\t    } else {\n\t        var scriptTag = document.scripts[document.scripts.length - 1];\n\t        this.parentNode = scriptTag.parentNode;\n\t    }\n\t\n\t    this.iframeHolder = this.parentNode.appendChild(document.createElement(\"div\"));\n\t    this.iframeHolder.id = \"jitsiConference\" + id;\n\t    if (width) this.iframeHolder.style.width = width + \"px\";\n\t    if (height) this.iframeHolder.style.height = height + \"px\";\n\t    this.frameName = \"jitsiConferenceFrame\" + id;\n\t    this.url = noSsl ? \"http\" : \"https\" + \"://\" + domain + \"/\";\n\t    if (room_name) this.url += room_name;\n\t    this.url += \"#jitsi_meet_external_api_id=\" + id;\n\t\n\t    var key;\n\t    if (configOverwrite) {\n\t        for (key in configOverwrite) {\n\t            if (!configOverwrite.hasOwnProperty(key) || typeof key !== 'string') continue;\n\t            this.url += \"&config.\" + key + \"=\" + configOverwrite[key];\n\t        }\n\t    }\n\t\n\t    if (interfaceConfigOverwrite) {\n\t        for (key in interfaceConfigOverwrite) {\n\t            if (!interfaceConfigOverwrite.hasOwnProperty(key) || typeof key !== 'string') continue;\n\t            this.url += \"&interfaceConfig.\" + key + \"=\" + interfaceConfigOverwrite[key];\n\t        }\n\t    }\n\t\n\t    this.frame = document.createElement(\"iframe\");\n\t    this.frame.src = this.url;\n\t    this.frame.name = this.frameName;\n\t    this.frame.id = this.frameName;\n\t    this.frame.width = \"100%\";\n\t    this.frame.height = \"100%\";\n\t    this.frame.setAttribute(\"allowFullScreen\", \"true\");\n\t    this.frame = this.iframeHolder.appendChild(this.frame);\n\t    this.postis = postisInit({\n\t        window: this.frame.contentWindow,\n\t        scope: \"jitsi_meet_external_api_\" + id\n\t    });\n\t\n\t    this.eventHandlers = {};\n\t\n\t    id++;\n\t}\n\t\n\t/**\n\t * Executes command. The available commands are:\n\t * displayName - sets the display name of the local participant to the value\n\t * passed in the arguments array.\n\t * toggleAudio - mutes / unmutes audio with no arguments\n\t * toggleVideo - mutes / unmutes video with no arguments\n\t * filmStrip - hides / shows the film strip with no arguments\n\t * If the command doesn't require any arguments the parameter should be set\n\t * to empty array or it may be omitted.\n\t * @param name the name of the command\n\t * @param arguments array of arguments\n\t */\n\tJitsiMeetExternalAPI.prototype.executeCommand = function (name, argumentsList) {\n\t    if (!(name in commands)) {\n\t        console.error(\"Not supported command name.\");\n\t        return;\n\t    }\n\t    var argumentsArray = argumentsList;\n\t    if (!argumentsArray) argumentsArray = [];\n\t    sendMessage(this.postis, { method: commands[name], params: argumentsArray });\n\t};\n\t\n\t/**\n\t * Executes commands. The available commands are:\n\t * displayName - sets the display name of the local participant to the value\n\t * passed in the arguments array.\n\t * toggleAudio - mutes / unmutes audio. no arguments\n\t * toggleVideo - mutes / unmutes video. no arguments\n\t * filmStrip - hides / shows the film strip. no arguments\n\t * toggleChat - hides / shows chat. no arguments.\n\t * toggleContactList - hides / shows contact list. no arguments.\n\t * toggleShareScreen - starts / stops screen sharing. no arguments.\n\t * @param object the object with commands to be executed. The keys of the\n\t * object are the commands that will be executed and the values are the\n\t * arguments for the command.\n\t */\n\tJitsiMeetExternalAPI.prototype.executeCommands = function (object) {\n\t    for (var key in object) {\n\t        this.executeCommand(key, object[key]);\n\t    }\n\t};\n\t\n\t/**\n\t * Adds event listeners to Meet Jitsi. The object key should be the name of\n\t * the event and value - the listener.\n\t * Currently we support the following\n\t * events:\n\t * incomingMessage - receives event notifications about incoming\n\t * messages. The listener will receive object with the following structure:\n\t * {{\n\t *  \"from\": from,//JID of the user that sent the message\n\t *  \"nick\": nick,//the nickname of the user that sent the message\n\t *  \"message\": txt//the text of the message\n\t * }}\n\t * outgoingMessage - receives event notifications about outgoing\n\t * messages. The listener will receive object with the following structure:\n\t * {{\n\t *  \"message\": txt//the text of the message\n\t * }}\n\t * displayNameChanged - receives event notifications about display name\n\t * change. The listener will receive object with the following structure:\n\t * {{\n\t * jid: jid,//the JID of the participant that changed his display name\n\t * displayname: displayName //the new display name\n\t * }}\n\t * participantJoined - receives event notifications about new participant.\n\t * The listener will receive object with the following structure:\n\t * {{\n\t * jid: jid //the jid of the participant\n\t * }}\n\t * participantLeft - receives event notifications about the participant that\n\t * left the room.\n\t * The listener will receive object with the following structure:\n\t * {{\n\t * jid: jid //the jid of the participant\n\t * }}\n\t * video-conference-joined - receives event notifications about the local user\n\t * has successfully joined the video conference.\n\t * The listener will receive object with the following structure:\n\t * {{\n\t * roomName: room //the room name of the conference\n\t * }}\n\t * video-conference-left - receives event notifications about the local user\n\t * has left the video conference.\n\t * The listener will receive object with the following structure:\n\t * {{\n\t * roomName: room //the room name of the conference\n\t * }}\n\t * readyToClose - all hangup operations are completed and Jitsi Meet is ready\n\t * to be disposed.\n\t * @param object\n\t */\n\tJitsiMeetExternalAPI.prototype.addEventListeners = function (object) {\n\t    for (var i in object) {\n\t        this.addEventListener(i, object[i]);\n\t    }\n\t};\n\t\n\t/**\n\t * Adds event listeners to Meet Jitsi. Currently we support the following\n\t * events:\n\t * incomingMessage - receives event notifications about incoming\n\t * messages. The listener will receive object with the following structure:\n\t * {{\n\t *  \"from\": from,//JID of the user that sent the message\n\t *  \"nick\": nick,//the nickname of the user that sent the message\n\t *  \"message\": txt//the text of the message\n\t * }}\n\t * outgoingMessage - receives event notifications about outgoing\n\t * messages. The listener will receive object with the following structure:\n\t * {{\n\t *  \"message\": txt//the text of the message\n\t * }}\n\t * displayNameChanged - receives event notifications about display name\n\t * change. The listener will receive object with the following structure:\n\t * {{\n\t * jid: jid,//the JID of the participant that changed his display name\n\t * displayname: displayName //the new display name\n\t * }}\n\t * participantJoined - receives event notifications about new participant.\n\t * The listener will receive object with the following structure:\n\t * {{\n\t * jid: jid //the jid of the participant\n\t * }}\n\t * participantLeft - receives event notifications about participant the that\n\t * left the room.\n\t * The listener will receive object with the following structure:\n\t * {{\n\t * jid: jid //the jid of the participant\n\t * }}\n\t * video-conference-joined - receives event notifications fired when the local\n\t * user has joined the video conference.\n\t * The listener will receive object with the following structure:\n\t * {{\n\t * roomName: room //the room name of the conference\n\t * }}\n\t * video-conference-left - receives event notifications fired when the local\n\t * user has joined the video conference.\n\t * The listener will receive object with the following structure:\n\t * {{\n\t * roomName: room //the room name of the conference\n\t * }}\n\t * @param event the name of the event\n\t * @param listener the listener\n\t */\n\tJitsiMeetExternalAPI.prototype.addEventListener = function (event, listener) {\n\t    if (!(event in events)) {\n\t        console.error(\"Not supported event name.\");\n\t        return;\n\t    }\n\t    // We cannot remove listeners from postis that's why we are handling the\n\t    // callback that way.\n\t    if (!(event in this.eventHandlers)) this.postis.listen(events[event], function (data) {\n\t        if (event in this.eventHandlers && typeof this.eventHandlers[event] === \"function\") this.eventHandlers[event].call(null, data);\n\t    }.bind(this));\n\t    this.eventHandlers[event] = listener;\n\t    changeEventStatus(this.postis, event, true);\n\t};\n\t\n\t/**\n\t * Removes event listener.\n\t * @param event the name of the event.\n\t */\n\tJitsiMeetExternalAPI.prototype.removeEventListener = function (event) {\n\t    if (!(event in this.eventHandlers)) {\n\t        console.error(\"The event \" + event + \" is not registered.\");\n\t        return;\n\t    }\n\t    delete this.eventHandlers[event];\n\t    changeEventStatus(this.postis, event, false);\n\t};\n\t\n\t/**\n\t * Removes event listeners.\n\t * @param events array with the names of the events.\n\t */\n\tJitsiMeetExternalAPI.prototype.removeEventListeners = function (events) {\n\t    for (var i = 0; i < events.length; i++) {\n\t        this.removeEventListener(events[i]);\n\t    }\n\t};\n\t\n\t/**\n\t * Removes the listeners and removes the Jitsi Meet frame.\n\t */\n\tJitsiMeetExternalAPI.prototype.dispose = function () {\n\t    this.postis.destroy();\n\t    var frame = document.getElementById(this.frameName);\n\t    if (frame) frame.src = 'about:blank';\n\t    var self = this;\n\t    window.setTimeout(function () {\n\t        self.iframeHolder.removeChild(self.frame);\n\t        self.iframeHolder.parentNode.removeChild(self.iframeHolder);\n\t    }, 10);\n\t};\n\t\n\tmodule.exports = JitsiMeetExternalAPI;\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\tfunction Postis(options) {\n\t  var scope = options.scope;\n\t  var targetWindow = options.window;\n\t  var windowForEventListening = options.windowForEventListening || window;\n\t  var listeners = {};\n\t  var sendBuffer = [];\n\t  var listenBuffer = {};\n\t  var ready = false;\n\t  var readyMethod = \"__ready__\";\n\t  var readynessCheck;\n\t\n\t  var listener = function(event) {\n\t    var data;\n\t    try {\n\t      data = JSON.parse(event.data);\n\t    } catch (e) {\n\t      return;\n\t    }\n\t\n\t    if (data.postis && data.scope === scope) {\n\t      var listenersForMethod = listeners[data.method];\n\t      if (listenersForMethod) {\n\t        for (var i = 0; i < listenersForMethod.length; i++) {\n\t          listenersForMethod[i].call(null, data.params);\n\t        }\n\t      } else {\n\t        listenBuffer[data.method] = listenBuffer[data.method] || [];\n\t        listenBuffer[data.method].push(data.params);\n\t      }\n\t    }\n\t  };\n\t\n\t  windowForEventListening.addEventListener(\"message\", listener, false);\n\t\n\t  var postis = {\n\t    listen: function (method, callback) {\n\t      listeners[method] = listeners[method] || [];\n\t      listeners[method].push(callback);\n\t\n\t      var listenBufferForMethod = listenBuffer[method];\n\t      if (listenBufferForMethod) {\n\t        var listenersForMethod = listeners[method];\n\t        for (var i = 0; i < listenersForMethod.length; i++) {\n\t          for (var j = 0; j < listenBufferForMethod.length; j++) {\n\t            listenersForMethod[i].call(null, listenBufferForMethod[j]);\n\t          }\n\t        }\n\t      }\n\t      delete listenBuffer[method];\n\t    },\n\t\n\t    send: function (opts) {\n\t      var method = opts.method;\n\t\n\t      if ((ready || opts.method === readyMethod) && (targetWindow && typeof targetWindow.postMessage === \"function\")) {\n\t        targetWindow.postMessage(JSON.stringify({\n\t          postis: true,\n\t          scope: scope,\n\t          method: method,\n\t          params: opts.params\n\t        }), \"*\");\n\t      } else {\n\t        sendBuffer.push(opts);\n\t      }\n\t    },\n\t\n\t    ready: function (callback) {\n\t      if (ready) {\n\t        callback();\n\t      } else {\n\t        setTimeout(function () { postis.ready(callback); }, 50);\n\t      }\n\t    },\n\t\n\t    destroy: function (callback) {\n\t      clearInterval(readynessCheck);\n\t      ready = false;\n\t      if (windowForEventListening && typeof windowForEventListening.removeEventListener === \"function\") {\n\t        windowForEventListening.removeEventListener(\"message\", listener);\n\t      }\n\t      callback && callback();\n\t    }\n\t  };\n\t\n\t  var readyCheckID = +new Date() + Math.random() + \"\";\n\t\n\t  readynessCheck = setInterval(function () {\n\t    postis.send({\n\t      method: readyMethod,\n\t      params: readyCheckID\n\t    });\n\t  }, 50);\n\t\n\t  postis.listen(readyMethod, function (id) {\n\t    if (id === readyCheckID) {\n\t      clearInterval(readynessCheck);\n\t      ready = true;\n\t\n\t      for (var i = 0; i < sendBuffer.length; i++) {\n\t        postis.send(sendBuffer[i]);\n\t      }\n\t      sendBuffer = [];\n\t    } else {\n\t      postis.send({\n\t        method: readyMethod,\n\t        params: id\n\t      });\n\t    }\n\t  });\n\t\n\t  return postis;\n\t}\n\t\n\tmodule.exports = Postis;\n\n\n/***/ }\n/******/ ])\n});\n;\n\n\n// WEBPACK FOOTER //\n// external_api.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap bd9fc911bcb4ae380ba7","/**\n * Implements API class that embeds Jitsi Meet in external applications.\n */\n\nvar postisInit = require(\"postis\");\n\n/**\n * The minimum width for the Jitsi Meet frame\n * @type {number}\n */\nvar MIN_WIDTH = 790;\n\n/**\n * The minimum height for the Jitsi Meet frame\n * @type {number}\n */\nvar MIN_HEIGHT = 300;\n\n/**\n * Last id of api object\n * @type {number}\n */\nvar id = 0;\n\n/**\n * Maps the names of the commands expected by the API with the name of the\n * commands expected by jitsi-meet\n */\nvar commands = {\n    \"displayName\": \"display-name\",\n    \"toggleAudio\": \"toggle-audio\",\n    \"toggleVideo\": \"toggle-video\",\n    \"toggleFilmStrip\": \"toggle-film-strip\",\n    \"toggleChat\": \"toggle-chat\",\n    \"toggleContactList\": \"toggle-contact-list\",\n    \"toggleShareScreen\": \"toggle-share-screen\",\n    \"hangup\": \"video-hangup\"\n};\n\n/**\n * Maps the names of the events expected by the API with the name of the\n * events expected by jitsi-meet\n */\nvar events = {\n    \"incomingMessage\": \"incoming-message\",\n    \"outgoingMessage\": \"outgoing-message\",\n    \"displayNameChange\": \"display-name-change\",\n    \"participantJoined\": \"participant-joined\",\n    \"participantLeft\": \"participant-left\",\n    \"videoConferenceJoined\": \"video-conference-joined\",\n    \"videoConferenceLeft\": \"video-conference-left\",\n    \"readyToClose\": \"video-ready-to-close\"\n};\n\n/**\n * Sends the passed object to Jitsi Meet\n * @param postis {Postis object} the postis instance that is going to be used\n * to send the message\n * @param object the object to be sent\n * - method {sting}\n * - params {object}\n */\nfunction sendMessage(postis, object) {\n    postis.send(object);\n}\n\n/**\n * Sends message for event enable/disable status change.\n * @param postis {Postis object} the postis instance that is going to be used.\n * @param event {string} the name of the event\n * @param status {boolean} true - enabled; false - disabled;\n */\nfunction changeEventStatus(postis, event, status) {\n    if(!(event in events)) {\n        console.error(\"Not supported event name.\");\n        return;\n    }\n    sendMessage(postis, {\n        method: \"jitsiSystemMessage\",\n        params: {type: \"eventStatus\", name: events[event], value: status}\n    });\n}\n\n/**\n * Constructs new API instance. Creates iframe element that loads\n * Jitsi Meet.\n * @param domain the domain name of the server that hosts the conference\n * @param room_name the name of the room to join\n * @param width width of the iframe\n * @param height height of the iframe\n * @param parent_node the node that will contain the iframe\n * @param filmStripOnly if the value is true only the small videos will be\n * visible.\n * @param noSsl if the value is true https won't be used\n * @constructor\n */\nfunction JitsiMeetExternalAPI(domain, room_name, width, height, parentNode,\n    configOverwrite, interfaceConfigOverwrite, noSsl) {\n    if (!width || width < MIN_WIDTH)\n        width = MIN_WIDTH;\n    if (!height || height < MIN_HEIGHT)\n        height = MIN_HEIGHT;\n\n    this.parentNode = null;\n    if (parentNode) {\n        this.parentNode = parentNode;\n    } else {\n        var scriptTag = document.scripts[document.scripts.length - 1];\n        this.parentNode = scriptTag.parentNode;\n    }\n\n    this.iframeHolder =\n        this.parentNode.appendChild(document.createElement(\"div\"));\n    this.iframeHolder.id = \"jitsiConference\" + id;\n    if(width)\n        this.iframeHolder.style.width = width + \"px\";\n    if(height)\n        this.iframeHolder.style.height = height + \"px\";\n    this.frameName = \"jitsiConferenceFrame\" + id;\n    this.url = (noSsl) ? \"http\" : \"https\" +\"://\" + domain + \"/\";\n    if(room_name)\n        this.url += room_name;\n    this.url += \"#jitsi_meet_external_api_id=\" + id;\n\n    var key;\n    if (configOverwrite) {\n        for (key in configOverwrite) {\n            if (!configOverwrite.hasOwnProperty(key) ||\n                typeof key !== 'string')\n                continue;\n            this.url += \"&config.\" + key + \"=\" + configOverwrite[key];\n        }\n    }\n\n    if (interfaceConfigOverwrite) {\n        for (key in interfaceConfigOverwrite) {\n            if (!interfaceConfigOverwrite.hasOwnProperty(key) ||\n                typeof key !== 'string')\n                continue;\n            this.url += \"&interfaceConfig.\" + key + \"=\" +\n                interfaceConfigOverwrite[key];\n        }\n    }\n\n    this.frame = document.createElement(\"iframe\");\n    this.frame.src = this.url;\n    this.frame.name = this.frameName;\n    this.frame.id = this.frameName;\n    this.frame.width = \"100%\";\n    this.frame.height = \"100%\";\n    this.frame.setAttribute(\"allowFullScreen\",\"true\");\n    this.frame = this.iframeHolder.appendChild(this.frame);\n    this.postis = postisInit({\n        window: this.frame.contentWindow,\n        scope: \"jitsi_meet_external_api_\" + id\n    });\n\n    this.eventHandlers = {};\n\n    id++;\n}\n\n/**\n * Executes command. The available commands are:\n * displayName - sets the display name of the local participant to the value\n * passed in the arguments array.\n * toggleAudio - mutes / unmutes audio with no arguments\n * toggleVideo - mutes / unmutes video with no arguments\n * filmStrip - hides / shows the film strip with no arguments\n * If the command doesn't require any arguments the parameter should be set\n * to empty array or it may be omitted.\n * @param name the name of the command\n * @param arguments array of arguments\n */\nJitsiMeetExternalAPI.prototype.executeCommand = function(name, argumentsList) {\n    if(!(name in commands)) {\n        console.error(\"Not supported command name.\");\n        return;\n    }\n    var argumentsArray = argumentsList;\n    if (!argumentsArray)\n        argumentsArray = [];\n    sendMessage(this.postis, {method: commands[name], params: argumentsArray});\n};\n\n/**\n * Executes commands. The available commands are:\n * displayName - sets the display name of the local participant to the value\n * passed in the arguments array.\n * toggleAudio - mutes / unmutes audio. no arguments\n * toggleVideo - mutes / unmutes video. no arguments\n * filmStrip - hides / shows the film strip. no arguments\n * toggleChat - hides / shows chat. no arguments.\n * toggleContactList - hides / shows contact list. no arguments.\n * toggleShareScreen - starts / stops screen sharing. no arguments.\n * @param object the object with commands to be executed. The keys of the\n * object are the commands that will be executed and the values are the\n * arguments for the command.\n */\nJitsiMeetExternalAPI.prototype.executeCommands = function(object) {\n    for(var key in object)\n        this.executeCommand(key, object[key]);\n};\n\n/**\n * Adds event listeners to Meet Jitsi. The object key should be the name of\n * the event and value - the listener.\n * Currently we support the following\n * events:\n * incomingMessage - receives event notifications about incoming\n * messages. The listener will receive object with the following structure:\n * {{\n *  \"from\": from,//JID of the user that sent the message\n *  \"nick\": nick,//the nickname of the user that sent the message\n *  \"message\": txt//the text of the message\n * }}\n * outgoingMessage - receives event notifications about outgoing\n * messages. The listener will receive object with the following structure:\n * {{\n *  \"message\": txt//the text of the message\n * }}\n * displayNameChanged - receives event notifications about display name\n * change. The listener will receive object with the following structure:\n * {{\n * jid: jid,//the JID of the participant that changed his display name\n * displayname: displayName //the new display name\n * }}\n * participantJoined - receives event notifications about new participant.\n * The listener will receive object with the following structure:\n * {{\n * jid: jid //the jid of the participant\n * }}\n * participantLeft - receives event notifications about the participant that\n * left the room.\n * The listener will receive object with the following structure:\n * {{\n * jid: jid //the jid of the participant\n * }}\n * video-conference-joined - receives event notifications about the local user\n * has successfully joined the video conference.\n * The listener will receive object with the following structure:\n * {{\n * roomName: room //the room name of the conference\n * }}\n * video-conference-left - receives event notifications about the local user\n * has left the video conference.\n * The listener will receive object with the following structure:\n * {{\n * roomName: room //the room name of the conference\n * }}\n * readyToClose - all hangup operations are completed and Jitsi Meet is ready\n * to be disposed.\n * @param object\n */\nJitsiMeetExternalAPI.prototype.addEventListeners = function(object) {\n    for(var i in object)\n        this.addEventListener(i, object[i]);\n};\n\n/**\n * Adds event listeners to Meet Jitsi. Currently we support the following\n * events:\n * incomingMessage - receives event notifications about incoming\n * messages. The listener will receive object with the following structure:\n * {{\n *  \"from\": from,//JID of the user that sent the message\n *  \"nick\": nick,//the nickname of the user that sent the message\n *  \"message\": txt//the text of the message\n * }}\n * outgoingMessage - receives event notifications about outgoing\n * messages. The listener will receive object with the following structure:\n * {{\n *  \"message\": txt//the text of the message\n * }}\n * displayNameChanged - receives event notifications about display name\n * change. The listener will receive object with the following structure:\n * {{\n * jid: jid,//the JID of the participant that changed his display name\n * displayname: displayName //the new display name\n * }}\n * participantJoined - receives event notifications about new participant.\n * The listener will receive object with the following structure:\n * {{\n * jid: jid //the jid of the participant\n * }}\n * participantLeft - receives event notifications about participant the that\n * left the room.\n * The listener will receive object with the following structure:\n * {{\n * jid: jid //the jid of the participant\n * }}\n * video-conference-joined - receives event notifications fired when the local\n * user has joined the video conference.\n * The listener will receive object with the following structure:\n * {{\n * roomName: room //the room name of the conference\n * }}\n * video-conference-left - receives event notifications fired when the local\n * user has joined the video conference.\n * The listener will receive object with the following structure:\n * {{\n * roomName: room //the room name of the conference\n * }}\n * @param event the name of the event\n * @param listener the listener\n */\nJitsiMeetExternalAPI.prototype.addEventListener = function(event, listener) {\n    if(!(event in events)) {\n        console.error(\"Not supported event name.\");\n        return;\n    }\n    // We cannot remove listeners from postis that's why we are handling the\n    // callback that way.\n    if(!(event in this.eventHandlers))\n        this.postis.listen(events[event], function(data) {\n            if((event in this.eventHandlers) &&\n                typeof this.eventHandlers[event] === \"function\")\n                this.eventHandlers[event].call(null, data);\n        }.bind(this));\n    this.eventHandlers[event] = listener;\n    changeEventStatus(this.postis, event, true);\n};\n\n/**\n * Removes event listener.\n * @param event the name of the event.\n */\nJitsiMeetExternalAPI.prototype.removeEventListener = function(event) {\n    if(!(event in this.eventHandlers))\n    {\n        console.error(\"The event \" + event + \" is not registered.\");\n        return;\n    }\n    delete this.eventHandlers[event];\n    changeEventStatus(this.postis, event, false);\n};\n\n/**\n * Removes event listeners.\n * @param events array with the names of the events.\n */\nJitsiMeetExternalAPI.prototype.removeEventListeners = function(events) {\n    for(var i = 0; i < events.length; i++)\n        this.removeEventListener(events[i]);\n};\n\n/**\n * Removes the listeners and removes the Jitsi Meet frame.\n */\nJitsiMeetExternalAPI.prototype.dispose = function() {\n    this.postis.destroy();\n    var frame = document.getElementById(this.frameName);\n    if(frame)\n        frame.src = 'about:blank';\n    var self = this;\n    window.setTimeout(function () {\n        self.iframeHolder.removeChild(self.frame);\n        self.iframeHolder.parentNode.removeChild(self.iframeHolder);\n    }, 10);\n};\n\nmodule.exports = JitsiMeetExternalAPI;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/API/external/external_api.js","function Postis(options) {\n  var scope = options.scope;\n  var targetWindow = options.window;\n  var windowForEventListening = options.windowForEventListening || window;\n  var listeners = {};\n  var sendBuffer = [];\n  var listenBuffer = {};\n  var ready = false;\n  var readyMethod = \"__ready__\";\n  var readynessCheck;\n\n  var listener = function(event) {\n    var data;\n    try {\n      data = JSON.parse(event.data);\n    } catch (e) {\n      return;\n    }\n\n    if (data.postis && data.scope === scope) {\n      var listenersForMethod = listeners[data.method];\n      if (listenersForMethod) {\n        for (var i = 0; i < listenersForMethod.length; i++) {\n          listenersForMethod[i].call(null, data.params);\n        }\n      } else {\n        listenBuffer[data.method] = listenBuffer[data.method] || [];\n        listenBuffer[data.method].push(data.params);\n      }\n    }\n  };\n\n  windowForEventListening.addEventListener(\"message\", listener, false);\n\n  var postis = {\n    listen: function (method, callback) {\n      listeners[method] = listeners[method] || [];\n      listeners[method].push(callback);\n\n      var listenBufferForMethod = listenBuffer[method];\n      if (listenBufferForMethod) {\n        var listenersForMethod = listeners[method];\n        for (var i = 0; i < listenersForMethod.length; i++) {\n          for (var j = 0; j < listenBufferForMethod.length; j++) {\n            listenersForMethod[i].call(null, listenBufferForMethod[j]);\n          }\n        }\n      }\n      delete listenBuffer[method];\n    },\n\n    send: function (opts) {\n      var method = opts.method;\n\n      if ((ready || opts.method === readyMethod) && (targetWindow && typeof targetWindow.postMessage === \"function\")) {\n        targetWindow.postMessage(JSON.stringify({\n          postis: true,\n          scope: scope,\n          method: method,\n          params: opts.params\n        }), \"*\");\n      } else {\n        sendBuffer.push(opts);\n      }\n    },\n\n    ready: function (callback) {\n      if (ready) {\n        callback();\n      } else {\n        setTimeout(function () { postis.ready(callback); }, 50);\n      }\n    },\n\n    destroy: function (callback) {\n      clearInterval(readynessCheck);\n      ready = false;\n      if (windowForEventListening && typeof windowForEventListening.removeEventListener === \"function\") {\n        windowForEventListening.removeEventListener(\"message\", listener);\n      }\n      callback && callback();\n    }\n  };\n\n  var readyCheckID = +new Date() + Math.random() + \"\";\n\n  readynessCheck = setInterval(function () {\n    postis.send({\n      method: readyMethod,\n      params: readyCheckID\n    });\n  }, 50);\n\n  postis.listen(readyMethod, function (id) {\n    if (id === readyCheckID) {\n      clearInterval(readynessCheck);\n      ready = true;\n\n      for (var i = 0; i < sendBuffer.length; i++) {\n        postis.send(sendBuffer[i]);\n      }\n      sendBuffer = [];\n    } else {\n      postis.send({\n        method: readyMethod,\n        params: id\n      });\n    }\n  });\n\n  return postis;\n}\n\nmodule.exports = Postis;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/postis/src/index.js\n// module id = 1\n// module chunks = 0"],"sourceRoot":""}